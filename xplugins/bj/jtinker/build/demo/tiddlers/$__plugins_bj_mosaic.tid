author: JeffreyWilkinson
core-version: >=5.1.9
created: 20151217165616734
dependents: 
description: mosaic
plugin-type: plugin
source: https://github.com/buggyj/tw5-xperimental
title: $:/plugins/bj/mosaic
type: application/json
version: 0.0.1

{
    "tiddlers": {
        "$:/plugins/bj/mosaic/mosaic-css": {
            "title": "$:/plugins/bj/mosaic/mosaic-css",
            "type": "plain/css",
            "tags": "$:/tags/Stylesheet",
            "text": ".mosaic {\n    width: 100%;\n}\n\n.mosaic tr { \n\tvertical-align: top;\n}\n"
        },
        "$:/plugins/bj/mosaic/mosaic.js": {
            "text": "/*\\\ntitle: $:/plugins/bj/mosaic/mosaic.js\ntype: application/javascript\nmodule-type: widget\n\n\n\\*/\n\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MosaicWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\tthis.addEventListeners([\n\t\t{type: \"tw-close-tiddler\", handler: \"handleCloseTiddlerEvent\"}\n\t]);\n};\n\n/*\nInherit from the base widget class\n*/\nMosaicWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\n\nMosaicWidget.prototype.render = function(parent,nextSibling) {\n\t// Save the parent dom node\n\tthis.parentDomNode = parent;\n\t// Compute our attributes\n\tthis.computeAttributes();\n\t// Execute our logic\n\tthis.execute();\n\t// Create a root domNode to contain our widget\n\tvar domNode = this.create(parent,nextSibling);\n\t// Assign classes to our domNode\n\tvar classes = this[\"class\"].split(\" \") || [];\n\tclasses.push(\"tw-grid-frame\");\n\tdomNode.className = classes.join(\" \");\n\t// Insert the root domNode for this widget\n\tthis.domNodes.push(domNode);\n\tparent.insertBefore(domNode,nextSibling);\n\t// Render the child widgets into the domNode\n\tthis.renderChildren(domNode,null);\n};\n\nMosaicWidget.prototype.create = function(parent,nextSibling) {\n\t// Create a simple div element to contain the table\n\treturn this.document.createElement(\"div\");\n};\n\nMosaicWidget.prototype.execute = function() {\n\t// Get the widget attributes\n\tthis.whenEmpty = this.getAttribute(\"whenEmpty\");\n\tthis.index=this.getAttribute(\"index\",\"0\");//reserve 0 for future use\n\tthis.template = this.getAttribute(\"template\");\t\n\tthis.wfixed = this.getAttribute(\"wfixed\");\n\tthis.variableName = this.getAttribute(\"variable\",\"currentTiddler\");\n\tthis.prefix = this.getAttribute(\"prefix\",\"mosaic\");\n    this.jsontid=this.getAttribute(\"json\",this.prefix);\n   \tthis.json=$tw.wiki.getTiddlerData(this.jsontid,{});\n   \tthis.json[this.index] = this.json[this.index]||[];\n\tthis.rows = parseInt(this.getAttribute(\"rows\",\"5\"),10);\n\tthis.cols = parseInt(this.getAttribute(\"cols\",\"5\"),10);\n\tthis[\"class\"] = this.getAttribute(\"class\",\"\");        //<col style=\"width:40%\">\n\n\n\t// Build the table widget tree  \n\tvar table = {type: \"element\",tag: \"table\", children:[],\n\t\tattributes: {class: {type: \"string\", value: \"mosaic\"}}};\n\tif (this.wfixed){\t\n\t\tfor(var col=0; col<this.cols; col++) {\n\t\t\ttable.children.push({type: \"element\",tag: \"col\", children:[],\n\t\t\tattributes: {style: {type: \"string\", value: \"width:\"+100/this.cols+\"%;\" }}});\n\t\t}\t\n\t}\n\t\t\n\tvar tbody = {type: \"element\",tag: \"tbody\", children:[]};\t\n\tfor(var row=0; row<this.rows; row++) {\n\t\tvar tr = {type: \"element\",tag: \"tr\", children:[]};\t\n\t\tfor(var col=0; col<this.cols; col++) {\n\t\t\tvar td = {type: \"element\",tag: \"td\", children:[]};\n\t\t\tvar item = this.makeItemTemplate(this.getTableCellTitle(col,row));\n\t\t\titem.row = row;\n\t\t\titem.col = col;\n\t\t\ttd.children.push(item);\n\t\t\ttr.children.push(td);\n\t\t}\n\t\ttbody.children.push(tr);\n\t}\n\n\ttable.children.push(tbody);\n\t// Append the contents enclosed by the grid widget\n\tvar children = [table];\n\tif (this.parseTreeNode && this.parseTreeNode.children) {\n\t\t//children = children.concat(this.parseTreeNode.children);\n\t}\n\t// Make all of the child widgets\n\tthis.makeChildWidgets(children);\n};\n\n\nMosaicWidget.prototype.getTableCellTitle = function(col,row) {\n\tvar val;\n\ttry {\n\t\t//this.json = (!!this.json)?this.json:$tw.wiki.getTiddlerData(this.jsontid);\n\t\tif (this.json[this.index][col]) {\n\t\t\tval=this.json[this.index][col][row];\n\t\t}\n\t  return (!!val)?val:null;\n\t} catch(e){ \n\t\t\n\t\treturn null;\n\t}\n};\n\nMosaicWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.tiddler || changedAttributes[\"class\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\tif(changedTiddlers[this.jsontid]) {\n\t\t\t\n\t\t\tthis.refreshSelf();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\n/*\nCompose the template for a list item\n*/\nMosaicWidget.prototype.makeItemTemplate = function(title) {\n\n\tvar tiddler ,\n\t\thasTemplate ,\n\t\ttemplate ,\n\t\ttemplateTree;\n\t\n\tif (!title) {\n\t\tif (this.whenEmpty){\n\t\ttemplateTree = [{type: \"transclude\", attributes: {tiddler: {type: \"string\", value: this.whenEmpty}}}];\n\t\t} else { //need to give the cell some invisable contain that takes up space, otherwise empty rows colapse\n\t\t\ttemplateTree = [{type: \"element\", tag: \"img\", attributes: {style: \n\t\t\t\t{type: \"string\", value: \"float:left;min-height:50px;min-width:50px;visibility:hidden;\"}}}];\n\t\t} \n\t} else {\n\t\t\t// Check if the tiddler has a template\n\t\ttiddler = this.wiki.getTiddler(title);\n\t\tif( tiddler && tiddler.hasField(\"template\")) {\n\t\t\ttemplate = tiddler.fields.template;\n\t\t}\n\t\t// Compose the transclusion of the template\n\t\tif(template) {\n\t\t\ttemplateTree = [{type: \"transclude\", attributes: {tiddler: {type: \"string\", value: template}}}];\n\t\t} else {\n\t\t\tif(this.parseTreeNode.children && this.parseTreeNode.children.length > 0) {\n\t\t\t\ttemplateTree = this.parseTreeNode.children;\n\t\t\t} else {\n\t\t\t\t// Default template is a link to the title\n\t\t\t\ttemplateTree = [{type: \"element\", tag: this.parseTreeNode.isBlock ? \"div\" : \"span\", \n\t\t\t\t\t\t\t\tchildren: [{type: \"link\", attributes: {to: {type: \"string\", value: title}}, children: [\n\t\t\t\t\t\t{type: \"text\", text: title}\n\t\t\t\t]}]}];\n\t\t\t}\n\t\t}\n\t}\n\t// Return the list item\n\treturn {type: \"cellitem\", itemTitle: title, variableName: this.variableName, children: templateTree, listtag:this.listtag};\n};\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nMosaicWidget.prototype.setTiddlerCell = function(what,col,row,del) {\n\tvar self = this;\n\tvar update = function(value) {\n\t\tvar tiddler = self.wiki.getTiddler(self.jsontid),updateFields;\n\t\tif (tiddler){\n\t\t\tupdateFields = {};\n\t\t} else {\n\t\t\tupdateFields = {title:self.jsontid,type:\"application/json\"}\n\t\t}\n\t\t\n\t\t//alert(JSON.stringify(tiddler))\n\t\tupdateFields[\"text\"] = value;\n\t\tself.wiki.addTiddler(new $tw.Tiddler(self.wiki.getCreationFields(),tiddler,updateFields,\n\t\tself.wiki.getModificationFields()));\n\t};\n\tif (!del) {\n\t\ttry {\t\n\t\t\tthis.json[this.index][col][row]='Ꮬ'+what;//BJ should first check to see if any  char of json is Ꮬ - if so use another char for marker\n\t\t} catch(e) { \n\t\t\ttry {\n\t\t\t\tthis.json[this.index][col]=[];\n\t\t\t\tthis.json[this.index][col][row]='Ꮬ'+what;//BJ should first check to see if any  char of json is Ꮬ - if so use another char for marker\n\t\t\t}  catch(e) { \n\t\t\t\tthis.json[this.index] =[];\n\t\t\t\tthis.json[this.index][col]=[];\n\t\t\t\tthis.json[this.index][col][row]='Ꮬ'+what;//BJ should first check to see if any  char of json is Ꮬ - if so use another char for marker\n\t\t\t}\n\t\t}\n\t}\n\tvar pattern=new RegExp('\"(Ꮬ?)('+escapeRegExp(what)+')\"',\"mg\");\n\tvar newval = JSON.stringify(this.json,null,2).replace(pattern,\n\t\tfunction(m,key1,key2,offset,str){ \n                if (key1=='Ꮬ') {// our new entry - remove special marker\n\t\t\t\t\treturn '\"'+key2+'\"';\n\t\t\t\t}\n\t\t\t\treturn '\"\"';//remove old entry\n\n\t\t});\n\tupdate(newval);\n};\n// Close a specified tiddler\nMosaicWidget.prototype.handleCloseTiddlerEvent = function(event) {\n\tvar title = event.param || event.tiddlerTitle;\n\tthis.setTiddlerCell(title,0,0,true);\n\treturn false;\n};\nexports.mosaic = MosaicWidget;\n\n/*\nInherit from the base widget class\n*/\nvar ItemWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\nItemWidget.prototype = new Widget();\n\nItemWidget.prototype.handleDropEvent  = function(event) {\n\tvar self = this,\n\t\tdataTransfer = event.dataTransfer,\n\t\treturned = this.nameandOnListTag(dataTransfer);\n\t\n\tif (!!returned.name) { //only handle tiddler drops\n\t\t\tvar node = this;\n\twhile(node && node.parentWidget) {\n\t\tif(!!node.setTiddlerCell) {\n\t\t\tnode.setTiddlerCell(returned.name,self.parseTreeNode.col,self.parseTreeNode.row);\n\t\t\tbreak;\n\t\t}\n\t\tnode = node.parentWidget;\n\t}\n\t\t //this.parentWidget.parentWidget.parentWidget.setTiddlerCell(returned.name,this.parseTreeNode.col,this.parseTreeNode.row);\n\n\t\t //cancel normal action\n\t\t this.cancelAction(event);\n\t\t self.dispatchEvent({type: \"tw-dropHandled\", param: null});\n\n\t }\n\t //else let the event fall thru\n};\n\nItemWidget.prototype.handleDragOverEvent  = function(event) {\n//alert(\"OVER\")\n\t// Tell the browser that we're still interested in the drop\n\tevent.preventDefault();\n\tevent.dataTransfer.dropEffect = \"copy\";\n};\n\nItemWidget.prototype.importDataTypes = [\n\t{type: \"text/vnd.tiddler\", IECompatible: false, convertToFields: function(data) {\n\t\treturn JSON.parse(data);\n\t}},\n\t{type: \"URL\", IECompatible: true, convertToFields: function(data) {\n\t\t// Check for tiddler data URI\n\t\tvar match = decodeURIComponent(data).match(/^data\\:text\\/vnd\\.tiddler,(.*)/i);\n\t\tif(match) {\n\t\t\treturn JSON.parse(match[1]);\n\t\t} else {\n\t\t\treturn { // As URL string\n\t\t\t\ttext: data\n\t\t\t};\n\t\t}\n\t}},\n\t{type: \"text/x-moz-url\", IECompatible: false, convertToFields: function(data) {\n\t\t// Check for tiddler data URI\n\t\tvar match = decodeURIComponent(data).match(/^data\\:text\\/vnd\\.tiddler,(.*)/i);\n\t\tif(match) {\n\t\t\treturn JSON.parse(match[1]);\n\t\t} else {\n\t\t\treturn { // As URL string\n\t\t\t\ttext: data\n\t\t\t};\n\t\t}\n\t}},\n\t{type: \"text/plain\", IECompatible: false, convertToFields: function(data) {\n\t\treturn {\n\t\t\ttext: data\n\t\t};\n\t}},\n\t{type: \"Text\", IECompatible: true, convertToFields: function(data) {\n\t\treturn {\n\t\t\ttext: data\n\t\t};\n\t}},\n\t{type: \"text/uri-list\", IECompatible: false, convertToFields: function(data) {\n\t\treturn {\n\t\t\ttext: data\n\t\t};\n\t}}\n];\nItemWidget.prototype.cancelAction =function(event) {\n\t// Try each provided data type in turn\n\t\t{\n\tvar self = this,\n\t\tdataTransfer = event.dataTransfer;\n\tevent.preventDefault();\n\t// Stop the drop ripple up to any parent handlers\n\tevent.stopPropagation();\n};\n};\n\n\nItemWidget.prototype.nameandOnListTag = function(dataTransfer) {\n\t// Try each provided data type in turn\n\tvar self = this;\n\tfor(var t=0; t<this.importDataTypes.length; t++) {\n\t\tif(!$tw.browser.isIE || this.importDataTypes[t].IECompatible) {\n\t\t\t// Get the data\n\t\t\tvar dataType = this.importDataTypes[t];\n\t\t\tvar data = dataTransfer.getData(dataType.type);\n\t\t\t// Import the tiddlers in the data\n\t\t\tif(data !== \"\" && data !== null) {\n\t\t\t\tvar tiddlerFields = dataType.convertToFields(data);\n\t\t\t\tif(!tiddlerFields.title) {\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn {name:tiddlerFields.title};\n\t\t\t}\n\t\t}\n\t};\n\treturn  {name:null, onList:false};\n};\n/*\nRender this widget into the DOM\n*/\nItemWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\nvar domNode = this.document.createElement(\"div\");\n\t// Add event handlers\n\t$tw.utils.addEventListeners(this.parentDomNode,[\n\t\t{name: \"drop\", handlerObject: this, handlerMethod: \"handleDropEvent\"},\n\t\t{name: \"dragover\", handlerObject: this, handlerMethod: \"handleDragOverEvent\"},\t\n\t\t]);\n\t// Insert element\n\tparent.insertBefore(domNode,nextSibling);\n\t//if (!!this.parseTreeNode.itemTitle) \n\tthis.renderChildren(this.parentDomNode,null);//BJ may set this behavour as an option??\n\t//else    domNode.innerHTML='<img style=\"float:left;min-height:50px;min-width:50px;visibility:hidden;\" />';\n\tthis.domNodes.push(domNode);\n};\n\n/*\nCompute the internal state of the widget\n*/\nItemWidget.prototype.execute = function() {\n\t// Set the current list item title\n\tif (!!this.parseTreeNode.itemTitle)\n\t\t\tthis.setVariable(this.parseTreeNode.variableName,this.parseTreeNode.itemTitle);\n\t// Construct the child widgets\n\tthis.col =this.parseTreeNode.col;\n\tthis.row =this.parseTreeNode.row;\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nItemWidget.prototype.refresh = function(changedTiddlers) {\n\treturn this.refreshChildren(changedTiddlers);\n};\n\nexports.cellitem = ItemWidget;\n})();\n",
            "title": "$:/plugins/bj/mosaic/mosaic.js",
            "type": "application/javascript",
            "module-type": "widget"
        }
    }
}