caption: Ractive.JS — Medium
created: 20151219211543354
location: https://medium.com/@browniefed/ractive-js-9223a00a0620#.lch56z6t1
modified: 20151219211543382
tags: RacTive/Clips clips
title: Ractive.JS — Medium
type: text/vnd.twbase<htmlbasic
when: 2015/12/19 21:15:43

<p class="graf--p graf-after--p" id="6400" name="6400">Dynamic templating(in the Ractive world) is being able to modify a piece or all of a template based upon data in your data set. Typically when you have an unknown and also want a half way decent architecture with readable templates. You could attach them all as partials, and do some complex expressions to output the correct template but this means you’re required to modify the template when things change. Example: A display grid with different types of data cells, and inline editing with their own complex templates.</p><h3 class="graf--h3 graf-after--p" id="ea1f" name="ea1f">The First Pass</h3><p class="graf--p graf-after--h3" id="2212" name="2212">We first solved this issue without the dynamic templating. The way the data was setup was having a group of columns that mapped to a particular key on the data row object. We looped over each column in JavaScript, determined what base template to use and with regular expressions we replaced HTML Comment tokens with both the column index and key for the data row. Our templates also contained the inline editing logic as well. Due to our data structure our templates ended up being four templates in one. Two sets for the display and two sets for the editing portion. Finally we mashed these all together in the correct order, slapped a row loop around the whole block and walked away. Suffice to say it was fast in some browsers, and slow in others but it worked. It worked are not the only words you want to use when developing a new architecture in a new library.</p><h3 class="graf--h3 graf-after--p" id="70ec" name="70ec">The Solution</h3><p class="graf--p graf-after--h3" id="6af2" name="6af2">We value performance so after getting it to work we turned towards doing it better. In future Ractive the partials will likely live on the data attribute. That way we can use the templating logic to point to the correct template, if the data changes to reference a new partial then we can teardown the old and replace it with the new. Ractive isn’t set up for DOM diffing yet but hopefully this in an applicable area to utilize it. After doing some analysis we found that templates took too long to parse, large lists caused two-way data binding to be slow, toggling the edit state to be slow, and rendering large amounts of rows took way too long.</p><p class="graf--p graf-after--p" id="31ba" name="31ba">We did a few things.</p><ol class="postList"><li class="graf--li graf-after--p" id="8e32" name="8e32">Took each template and converted it into as functionally small as possible. Each template was broke into display pieces and edit pieces.</li><li class="graf--li graf-after--li" id="3af7" name="3af7">Created a row editor rather than the grid templates also being in charge of online editing. Separation of concerns.</li><li class="graf--li graf-after--li" id="a704" name="a704">Preparsed the templates with Require.JS optimizer</li></ol><h3 class="graf--h3 graf-after--li" id="bf6b" name="bf6b">The Dynamic Template Component Code</h3><p class="graf--p graf-after--h3" id="f4f6" name="f4f6">The reason you actually read this article.</p>