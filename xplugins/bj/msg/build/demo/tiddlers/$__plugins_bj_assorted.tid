author: JeffreyWilkinson
core-version: >=5.1.8
created: 20151117173430860
dependents: 
description: bit and pieces
list: readme license
plugin-type: plugin
source: https://github.com/buggyj/TW5-plugins
title: $:/plugins/bj/assorted
type: application/json
version: 0.0.2

{
    "tiddlers": {
        "$:/bj/modules/widgets/bjforms/default.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/bjforms/default.js\ntype: application/javascript\ntags:  $:/tags/bjforms\nmodule-type: library\n\\*/\n\nexports.name =\"default\";\nexports.run  = function(node,vals,title) {\n\t\tvals['title'] = title;//this.tiddlertitle;\n\t\tthis.wiki.addTiddler(new $tw.Tiddler(this.wiki.getCreationFields(),vals,this.wiki.getModificationFields()));\n\t\t\n}\n\n",
            "title": "$:/bj/modules/widgets/bjforms/default.js",
            "type": "application/javascript",
            "tags": "$:/tags/bjforms",
            "module-type": "library"
        },
        "$:/bj/modules/widgets/bjforms.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/bjforms.js\ntype: application/javascript\nmodule-type: widget\n\nbjforms widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar BjformsWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nBjformsWidget.prototype = new Widget();\n\n\nBjformsWidget.prototype.serialize = function(form, evt, query){\n    var evt    = evt || window.event;\n    var target = evt.target || evt.srcElement || null;\n    var field;\n    query = query  || {};\n    if(typeof form == 'object' && form.nodeName == \"FORM\"){\n        for(var i=form.elements.length-1; i>=0; i--){\n            field = form.elements[i];\n            if(field.name && !field.disabled && field.type != 'file' && field.type != 'reset'){\n                if(field.type == 'select-multiple'){\n                    for(j=form.elements[i].options.length-1; j>=0; j--){\n                        if(field.options[j].selected){\n                            query [field.name] =  field.options[j].value;\n                        }\n                    }\n                }\n                else{\n                    if((field.type != 'submit' && field.type != 'button') || target == field){\n                        if((field.type != 'checkbox' && field.type != 'radio') || field.checked){\n                           query [field.name] = field.value;\n                        }   \n                    }\n                }\n            }\n        }\n    }\n    return query;\n}\n/*\nRender this widget into the DOM\n*/\nBjformsWidget.prototype.render = function(parent,nextSibling) {\n\tvar self = this;\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n\t//we now need to find the form and attach a handler\n\t//if not null?\n\tif (self.tiddlertitle) {\n\t\t\tvar configOptions = $tw.wiki.getTiddlerData(self.tiddlertitle,{}), i;\n\t\t\tfor (i in configOptions) {\n\t\t\t\ttry {\n\t\t\t\t\tparent.firstElementChild[i].value = configOptions[i];\n\t\t\t\t} catch (e) {\n\t\t\t\t\t\n\t\t\t\t} \n\t\t\t\t\n\t\t\t}\n\t}\n\tparent.firstElementChild.addEventListener(\"submit\", function (e) {\n\t\te.preventDefault();\n\t\tvar vals = self.serialize(this, e);//this, is the dom node\n\t\tif (self.macro) {\t\n\t\t\tself.macro( this,vals,self.tiddlertitle,self.attributes);\n\t\t\treturn false;\n\t\t} \n\t\t//else alert(\"SS\")\n\t\t ;\n\t\tself.wiki.setTiddlerData (self.tiddlertitle,vals);\n\t\t//add override function latter\n\t\t//params.push({name: \"form\", value: form});\n\t\t//this.getVariable(this.getAttribute(\"$refresh\"),{params: params};\n\t\treturn false;\n\t},false);\n\t\t\n\tparent.firstElementChild.addEventListener(\"input\", function (e) {\n\t\te.preventDefault();\n\t\tvar vals = self.serialize(this, e);//this, is the dom node\n\t\tif (self.macro_oninput) {\t\n\t\t\tself.macro_oninput( this,vals,self.tiddleroninput,self.attributes);\n\t\t\treturn false;\n\t\t} \n\t\t//else alert(\"SS\")\n\t\tif (!self.tiddleroninput) return false;\n\t\tself.wiki.setTiddlerData (self.tiddlertitle,vals);\n\t\t//add override function latter\n\t\t//params.push({name: \"form\", value: form});\n\t\t//this.getVariable(this.getAttribute(\"$refresh\"),{params: params};\n\t\treturn false;\n////////////////\n\n\t},false);\n};\n\nBjformsWidget.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[all[shadows+tiddlers]tag[$:/tags/bjforms]]\";\n\treturn this.wiki.filterTiddlers(defaultFilter,this);\n}\n\nBjformsWidget.prototype.macro = null;\n/*\nCompute the internal state of the widget\n*/\nBjformsWidget.prototype.execute = function() {\n\tvar self = this;\n\tthis.tiddlertitle = this.getAttribute(\"tiddler\",\"testbjformstitle\");\n\tthis.tiddleroninput = this.getAttribute(\"tiddleroninput\");\n\t//during execution we must setup the users callback - if given\n\t//* first get list of defined macros\n\tthis.list = this.getTiddlerList();\n\t//BJ meditation why bother with a list just check it is tagged and is a javascrript module\n\t// change saver to onSubmit and also provde oninput parameter\n\t\n\t\n\tthis.macro_oninput = null;\n\t$tw.utils.each(this.list,function(title,index) {\n\t\tif (title == self.getAttribute(\"oninput\")) {\n\t\t\ttry {\n\t\t\t\tvar func = require(title);\t\t\t\n\t\t\t\tself.macro_oninput=func.run;\n\t\t\t} catch (e) {\n\t\t\t\talert(\"Bj: problem with user forms handler \" + title);require(title);\n\t\t\t} \n\t\t}//else alert(title + self.getAttribute(\"saver\",\"$:/core/modules/widgets/bjforms/default.js\"))\n\t\t\n\t});\t//\n\tthis.macro = null;\n\t$tw.utils.each(this.list,function(title,index) {\n\t\tif (title == self.getAttribute(\"saver\",\"$:/core/modules/widgets/bjforms/default.js\")) {\n\t\t\ttry {\n\t\t\t\tvar func = require(title);\t\t\t\n\t\t\t\tself.macro=func.run;\n\t\t\t} catch (e) {\n\t\t\t\talert(\"Bj: problem with user forms handler \" + title);require(title);\n\t\t\t} \n\t\t}//else alert(title + self.getAttribute(\"saver\",\"$:/core/modules/widgets/bjforms/default.js\"))\n\t\t\n\t});\t//\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nBjformsWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif($tw.utils.count(changedAttributes) > 0) {\n\t\t// Rerender ourselves\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} \n\t//else  \n\tif (this.getAttribute(\"$refresh\")) {\n\t\tvar params = this.params.slice(0);\n\t\tparams.push({name: \"changedTiddlers\", value: changedTiddlers});\n\t\tif (this.getVariable(this.getAttribute(\"$refresh\"),{params: params})) {\n\t\t\t\t\t// Rerender ourselves\n\t\t\tthis.refreshSelf();\n\t\t\treturn true;\n\t\t} \n\t//else \n\t}\n\treturn this.refreshChildren(changedTiddlers);\n\n};\n\nexports.bjforms = BjformsWidget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/bjforms.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/bj/modules/widgets/mangletagsextra.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/mangletagsextra.js\ntype: application/javascript\nmodule-type: widget\n\nMangleTagsExtaWidget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MangleTagsExtraWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMangleTagsExtraWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMangleTagsExtraWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n\n};\n\n/*\nCompute the internal state of the widget\n*/\nMangleTagsExtraWidget.prototype.execute = function() {\n\t// Get our parameters\n    if (this.getAttribute(\"removeAll\")) this.removelist = this.wiki.filterTiddlers(this.getAttribute(\"removeAll\"),this);\n    if (this.getAttribute(\"addAll\")) this.addlist = this.wiki.filterTiddlers(this.getAttribute(\"addAll\"),this);\n    // Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMangleTagsExtraWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes[\"removeAll\"] || changedAttributes[\"addAll\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n};\n\nMangleTagsExtraWidget.prototype.invokeMsgAction = function(param) {\n\t// Set defaults\n\tvar self = this;\n\tthis.mangleTitle = this.getVariable(\"currentTiddler\");\n\tif(param.event.param) {\n\t\tthis.mangleTitle = param.event.param;\n\t\tthis.sendParam = param.event.param;\n\t}\n\tif(this.catchTiddler) {\n\t\tthis.mangleTitle = this.catchTiddler;\n\t}\n\t// Get the target tiddler\n\tvar tiddler = this.wiki.getTiddler(this.mangleTitle);\n\t// If there is a find= attribute -- find the tag and remove it\n\t\n\tif(tiddler) {\n\t\tvar modification;\n\n\t\tif (this.removelist) {\n\t\t\tif (!modification) {\n\t\t\t\tmodification = this.wiki.getModificationFields();\n\t\t\t\tmodification.tags = (tiddler.fields.tags || []).slice(0);\n\t\t\t}\n\t\t\tmodification.tags = modification.tags.filter(function(i) {return self.removelist.indexOf(i) < 0;});\n\t\t}\n \n\t\tif(this.addlist) {\n\t\t\tif (!modification) {\n\t\t\t\tmodification = this.wiki.getModificationFields();\n\t\t\t\tmodification.tags = (tiddler.fields.tags || []).slice(0);\n\t\t\t}\n\t\t\t$tw.utils.pushTop(modification.tags,this.addlist);\n\t\t}\n\n\t\t// Save the modified tiddler\n\t\tif (modification) {\n\t\t\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\n\t\t}\n\t}\n\n\treturn param;\n\n};\n\nexports.mangletagsextra = MangleTagsExtraWidget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/mangletagsextra.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/bj/modules/widgets/msgcatcher.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/msgcatcher.js\ntype: application/javascript\nmodule-type: widget\n\nMsgCatcherWiget - root of msg action widget - \t1 \n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MsgCatcherWiget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMsgCatcherWiget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMsgCatcherWiget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nMsgCatcherWiget.prototype.execute = function() {\n\t// Get our parameters\n    this.msg=this.getAttribute(\"msg\");\n    if (this.msg) {\n\t\tthis.eventListeners = {};\n\t\tthis.addEventListeners([\n\t\t\t{type: this.msg, handler: \"handleEvent\"}\n\t\t]);\n\t}\n    // Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMsgCatcherWiget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes[\"msg\"] ) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\telse {\n\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\nMsgCatcherWiget.prototype.handleEvent = function(event) {\n\tthis.invokeMsgActions(event);\n\treturn false;//always consume event\n};\n\n/*Invoke any action widgets that are immediate children of this widget\n*/\nMsgCatcherWiget.prototype.invokeMsgActions = function(event) {\n\tfor(var t=0; t<this.children.length; t++) {\n\t\tvar child = this.children[t];\n\t\tvar params = {event:event,continue:false};\n\t\tif(child.invokeMsgAction) params = child.invokeMsgAction(params); \n\t}\n\tif(params.continue && this.parentWidget) {\n\t\tthis.parentWidget.dispatchEvent(params.event);\n\t}\n};\nexports.msgcatcher = MsgCatcherWiget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/msgcatcher.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/bj/modules/widgets/bjforms/multi.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/bjforms/multi.js\ntype: application/javascript\ntags:  $:/tags/bjforms\nmodule-type: library\n\\*/\n\nexports.name =\"multi\";\nexports.run  = function(node,vals,title,params) {\n\n\tfunction getAttribute(name,defaultText) {\n\t\tif($tw.utils.hop(params,name)) {\n\t\t\treturn params[name];\n\t\t} else {\n\t\t\treturn defaultText;\n\t\t}\n\t};      \n\tvals['title'] = title;\n\tvar tiddler=new $tw.Tiddler(this.wiki.getCreationFields(),vals,this.wiki.getModificationFields());\n//alert(tiddler.fields.title)\n\tvar tiddlers = [tiddler];\n    var multititle = getAttribute(\"multitiddler\",\"testmulti\");\n\t// Get the current $:/Import tiddler\n\tvar importTiddler = $tw.wiki.getTiddler(multititle),\n\t\timportData = $tw.wiki.getTiddlerData(multititle,{}),\n\t\tnewFields = new Object({\n\t\t\ttitle: multititle,\n\t\t\ttype: \"application/json\",\n\t\t\t\"sub-type\": \"tidtable\"\n\t\t});\n\n\timportData.tiddlers = importData.tiddlers || {};\n\n\timportData.tiddlers[tiddler.fields.title] = tiddler.fields;\n\t// Save the $:/Import tiddler\n\tnewFields.text = JSON.stringify(importData,null,$tw.config.preferences.jsonSpaces);\n\t$tw.wiki.addTiddler(new $tw.Tiddler(importTiddler,newFields)); \n\t// Update the story and history details\n}\n\n",
            "title": "$:/bj/modules/widgets/bjforms/multi.js",
            "type": "application/javascript",
            "tags": "$:/tags/bjforms",
            "module-type": "library"
        },
        "$:/bj/modules/widgets/plylist.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/plylist.js\ntype: application/javascript\nmodule-type: widget\n\n\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MPlayListWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\t\tthis.addEventListeners([\n\t{type: \"tm-ply-next\", handler: \"handleNextEvent\"},\n\t{type: \"tm-ply-move\", handler: \"handleMoveEvent\"},\n\t{type: \"tm-ply-prev\", handler: \"handlePrevEvent\"}]);\n};\n/*\nInherit from the base widget class\n*/\nMPlayListWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMPlayListWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nMPlayListWidget.prototype.execute = function() {\n\t// Compose the list elements\n\tthis.list = this.getTiddlerList();\n\tthis.n =-1;\n    this.syntid = this.getAttribute(\"syntid\");\n    this.mode = this.getAttribute(\"mode\");\n\t\t// Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\nMPlayListWidget.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[tag[\"+this.getVariable(\"currentTiddler\")+\"]]\";\n\treturn this.wiki.filterTiddlers(this.getAttribute(\"filter\",defaultFilter),this);\n};\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nMPlayListWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\t//alert(this.attributes.filter);\n\tif(changedAttributes.filter || changedAttributes[\"$tiddler\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nMPlayListWidget.prototype.invokeMsgAction = function(param) {\n\tthis.doNext();\n\treturn param;\n};\nMPlayListWidget.prototype.updatelist = function() {\n\tvar list,n,i,curr = this.list[this.n];\n\tlist = this.getTiddlerList();\n\tfor ( i = 0; i < list.length; i++) {\n\t\tif (list[i] === curr) break;\n\t}\n\tif (i === list.length) i = 0;\n\tthis.n = i;\n\tthis.list = list;\n}\n\t\nMPlayListWidget.prototype.doMove = function(loc) {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,uri,i;\n\t\tfor (i = 0; i < this.list.length; i++) {\n\t\t\tif ((loc == this.list[i])) {\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == this.list.length ? this.list.length - 1 : i);\n\t}\n}\nMPlayListWidget.prototype.doStart = function() {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tthis.n = -1;\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,uri,i;\n\t\tif (this.n == this.list.length -1) {\n\t\t\tthis.invokeActions();\n\t\t\treturn;\n\t\t};\n\t\tfor (i = this.n + 1; i < this.list.length; i++) {\n\t\t\tif ((tid = this.wiki.getTiddler(this.list[i])) ) {\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == this.list.length ? this.list.length - 1 : i);\n\t}\n}\nMPlayListWidget.prototype.doNext = function() {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,uri,i;\n\t\tif (this.n == this.list.length -1) {\n\t\t\tthis.invokeActions();\n\t\t\treturn;\n\t\t}\n\t\tfor (i = this.n + 1; i < this.list.length; i++) {\n\t\t\tif ((tid = this.wiki.getTiddler(this.list[i]))) {\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == this.list.length ? this.list.length - 1 : i);\n\t}\n}\nMPlayListWidget.prototype.doPrev = function() {\n\tif (this.mode == \"dynamic\") this.updatelist();\n\tif(this.list.length === 0) {\n\t\t//do nothing\n\t} else {\n\t\tvar tid,i;\n\t\t\n\t\tfor (i = this.n - 1; i >=0; i--) {\n\t\t\tif (tid = this.wiki.getTiddler(this.list[i]))  {\n\t\t\t\tthis.wiki.setTextReference(this.syntid,this.list[i],this.getVariable(\"currentTiddler\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.n = (i == -1? 0 : i);\n\t}\n}\nMPlayListWidget.prototype.handleNextEvent = function(event) {\n\t\t// Check for an empty list\n\tthis.doNext();\n\treturn false; // dont propegate\n}\nMPlayListWidget.prototype.handleMoveEvent = function(event) {\n\t\t// Check for an empty list\n\tthis.doMove(event.navigateTo);\n\treturn false; // dont propegate\n}\nMPlayListWidget.prototype.handlePrevEvent = function(event) {\n\t\t// Check for an empty list\n\tthis.doPrev();\n\treturn false; // dont propegate\n\t\n\t\n}\nexports[\"playlist\"] = MPlayListWidget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/plylist.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/bj/plugins/assorted/script.js": {
            "text": "/*\\\ntitle: $:/plugins/bj/plugins/assorted/script.js\ntype: application/javascript\nmodule-type: widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ScriptWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nScriptWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nScriptWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\t\t// Create our element\n\tvar domNode = this.document.createElement(\"script\");\n\tif (this.id) domNode.setAttribute(\"id\",this.id);\n\tif (this.type) domNode.setAttribute(\"type\",this.type);\n\tvar textNode = this.document.createTextNode(this.text);\n\tdomNode.insertBefore(textNode,nextSibling);\n\tthis.domNodes.push(textNode);\n\tparent.insertBefore(domNode,null);\n\tthis.domNodes.push(domNode);\n};\n\n/*\nCompute the internal state of the widget\n*/\nScriptWidget.prototype.execute = function() {\n\t// Get our parameters\n\tvar self = this;\n\tthis.id = this.getAttribute(\"id\");\n\tthis.transcludeMode = this.getAttribute(\"mode\");\n\tthis.source = this.getAttribute(\"source\");\n\tthis.type = this.getAttribute(\"type\");\n\tvar tiddler = $tw.wiki.getTiddler(this.source);\n\tif(tiddler) {\t\n\t\tthis.text = tiddler.fields.text;\n\t}\n\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nScriptWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.values || changedTiddlers[this.source]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\treturn false;\t\t\n\t}\n};\n\nexports.script = ScriptWidget;\n\n})();\n",
            "title": "$:/plugins/bj/plugins/assorted/script.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/mcore/modules/utils/dom/timer.js": {
            "text": "/*\\\ntitle: $:/mcore/modules/utils/dom/timer.js\ntype: application/javascript\nmodule-type: utils\n\\*/\n\n(function(){\n\nexports[\"bjGlogalTimer\"] = {\n\tregistered: [],\n\ttickers:[],\n\tjsTimer: 0,\n\tInf : 8640000000000000, // Sat Sep 13 275760 01:00:00 GMT+0100 (BST)!\n\tregister: function(instance){\n\t\tif(this.registered.length === 0){\n\t\t\tthis.jsTimer = setInterval(this.updateFunc.bind(this), 1000);\n\t\t}\n\t\tvar dateTimeout;\n\t\t\n\t\tif (!instance.timeout)  {\n\t\t\tdateTimeout = new Date(this.Inf);\n\t\t}\n\t\telse { \n\t\t\tdateTimeout = new Date(instance.timeout);\n\t\t}\n\t\tvar listItem = {instance:instance, dateTimeout:dateTimeout};\n\n\t\tthis.registered.push(listItem);\n\t\t//sort on date order (descending);\n\t\tthis.registered.sort(function(a, b){return a.dateTimeout-b.dateTimeout});  \n\t\t//add to periodic list \n\t\tif (instance.onTick) {\n\t\t\tthis.tickers.push(instance);\n\t\t}\t\t\n\t},\n\tunregister: function(instance){\n\t\t//external api\n\t\tfunction getInstance (arr, value) {\n\t\t\tvar result  = arr.filter(function(o){return o.instance == value;} );\n\t\t\treturn result? result[0] : null; //value should be unique\n\t\t}\n\n\t\tvar item = getInstance(this.registered,instance);\n\t\tif(item){\n\t\t\tvar pos = this.registered.indexOf(item);\n\t\t\tthis.registered.splice(pos, 1);\n\t\t\tif(this.registered.length === 0){\n\t\t\t\tclearInterval(this.jsTimer);\n\t\t\t}\n\t\t\t//if it was a ticker remove from ticker list.\n\t\t\tvar index = this.tickers.indexOf(instance);\n\t\t\tif (index != -1) {\n\t\t\t\tthis.tickers.splice(index, 1);\n\t\t\t}\n\t\t} \n\t},\n\n\tupdateFunc: function(){\n\t//check next timeout\n\t\tvar now = new Date();\n\t\tvar self = this;\n\t\tvar listTop = this.registered[0]||null;\n\t\twhile (listTop && (listTop.dateTimeout - now <= 0)) {\n\t\t\tif (listTop.instance.onTimeout) {\n\t\t\t\tvar rep;\n\t\t\t\t//if user has set a final method\n\t\t\t\tif(rep=listTop.instance.onTimeout()) {\n\t\t\t\t\tthis.register(rep);\n\t\t\t\t}\n\t\t\t}\n\t\t\tshift();\t\t\t\n\t\t\tlistTop = this.registered[0]||null;\n\t\t}\t\n\t\t//update tickers\n\t\tvar localtickers = this.tickers.slice(0);\n\t\tfor(var i = 0; i < localtickers.length; i++){\n\t\t\tif (localtickers[i].onTick()==true) {\n\t\t\t\t//return means remove\n\t\t\t\tthis.unregister(localtickers[i]);\n\t\t\t}\n\t\t}\n\t\t//** return **//\n\t\tfunction shift(instance){\n\t\t\t//remember listItem = {instance:instance, dateTimeout:dateTimeout}\n\t\t\tself.registered.shift();\n\t\t\tif(self.registered.length === 0){\n\t\t\t\tclearInterval(this.jsTimer);\n\t\t\t}\n\t\t\t//if it was a ticker remove from ticker list.\n\t\t\tvar index = self.tickers.indexOf(instance);\n\t\t\tif (index != -1) {\n\t\t\t\tthis.tickers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n};\n\n})();\n",
            "title": "$:/mcore/modules/utils/dom/timer.js",
            "type": "application/javascript",
            "module-type": "utils"
        },
        "$:/bj/modules/widgets/local.js": {
            "text": "/*\\\ntitle: $:/bj/modules/widgets/local.js\ntype: application/javascript\nmodule-type: widget\n\nMangleTagsExtaWidget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MangleTagsWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\tthis.addEventListeners([\n        {type: \"tm-navigate\", handler: \"handleMangleTagsEvent\"}\n   \t]);\n};\n\n/*\nInherit from the base widget class\n*/\nMangleTagsWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMangleTagsWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nMangleTagsWidget.prototype.execute = function() {\n\t// Get our parameters\n    this.msg = this.getAttribute(\"msg\");\n this.tid = this.getAttribute(\"tid\");\n    //if (this.getAttribute(\"addAll\")) this.addlist = this.wiki.filterTiddlers(this.getAttribute(\"addAll\"),this);\n    // Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMangleTagsWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(false) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\telse {\n\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\nMangleTagsWidget.prototype.handleMangleTagsEvent = function(event) {\n\t// Set defaults\n\tvar self = this;\n\tvar ref = {};\n\tref[this.tid] = {\"modified\":true};\n\tthis.refreshChildren(ref);\n};\n\nexports.local = MangleTagsWidget;\n\n})();\n",
            "title": "$:/bj/modules/widgets/local.js",
            "type": "application/javascript",
            "module-type": "widget"
        }
    }
}